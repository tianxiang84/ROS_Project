# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/ColorRangeHSV.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ColorRangeHSV(genpy.Message):
  _md5sum = "54efefea98c15a07b7359b9e855639cf"
  _type = "im_pickit_msgs/ColorRangeHSV"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# An HSV-based color range.

# The range for the color representation. 
# Hue: range is from 0 to 360.
uint32 h_min
uint32 h_max
# Saturation: range is from 0 to 1.
float64 s_min
float64 s_max
# Saturation: range is from 0 to 1.
float64 v_min
float64 v_max
"""
  __slots__ = ['h_min','h_max','s_min','s_max','v_min','v_max']
  _slot_types = ['uint32','uint32','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       h_min,h_max,s_min,s_max,v_min,v_max

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ColorRangeHSV, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.h_min is None:
        self.h_min = 0
      if self.h_max is None:
        self.h_max = 0
      if self.s_min is None:
        self.s_min = 0.
      if self.s_max is None:
        self.s_max = 0.
      if self.v_min is None:
        self.v_min = 0.
      if self.v_max is None:
        self.v_max = 0.
    else:
      self.h_min = 0
      self.h_max = 0
      self.s_min = 0.
      self.s_max = 0.
      self.v_min = 0.
      self.v_max = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I4d().pack(_x.h_min, _x.h_max, _x.s_min, _x.s_max, _x.v_min, _x.v_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.h_min, _x.h_max, _x.s_min, _x.s_max, _x.v_min, _x.v_max,) = _get_struct_2I4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I4d().pack(_x.h_min, _x.h_max, _x.s_min, _x.s_max, _x.v_min, _x.v_max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.h_min, _x.h_max, _x.s_min, _x.s_max, _x.v_min, _x.v_max,) = _get_struct_2I4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4d = None
def _get_struct_2I4d():
    global _struct_2I4d
    if _struct_2I4d is None:
        _struct_2I4d = struct.Struct("<2I4d")
    return _struct_2I4d
