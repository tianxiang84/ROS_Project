# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/CalibrationStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrationStatus(genpy.Message):
  _md5sum = "eb9e08f442b346d90200848306f7f520"
  _type = "im_pickit_msgs/CalibrationStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """## Copyright Pick-it NV 2017
## This message contains Calibration status information  ##

bool calibration_plate_visible
bool calibration_request_received
bool calibration_plate_localized
bool calibration_input_poses_received

bool calibration_calculated
"""
  __slots__ = ['calibration_plate_visible','calibration_request_received','calibration_plate_localized','calibration_input_poses_received','calibration_calculated']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       calibration_plate_visible,calibration_request_received,calibration_plate_localized,calibration_input_poses_received,calibration_calculated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrationStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.calibration_plate_visible is None:
        self.calibration_plate_visible = False
      if self.calibration_request_received is None:
        self.calibration_request_received = False
      if self.calibration_plate_localized is None:
        self.calibration_plate_localized = False
      if self.calibration_input_poses_received is None:
        self.calibration_input_poses_received = False
      if self.calibration_calculated is None:
        self.calibration_calculated = False
    else:
      self.calibration_plate_visible = False
      self.calibration_request_received = False
      self.calibration_plate_localized = False
      self.calibration_input_poses_received = False
      self.calibration_calculated = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.calibration_plate_visible, _x.calibration_request_received, _x.calibration_plate_localized, _x.calibration_input_poses_received, _x.calibration_calculated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.calibration_plate_visible, _x.calibration_request_received, _x.calibration_plate_localized, _x.calibration_input_poses_received, _x.calibration_calculated,) = _get_struct_5B().unpack(str[start:end])
      self.calibration_plate_visible = bool(self.calibration_plate_visible)
      self.calibration_request_received = bool(self.calibration_request_received)
      self.calibration_plate_localized = bool(self.calibration_plate_localized)
      self.calibration_input_poses_received = bool(self.calibration_input_poses_received)
      self.calibration_calculated = bool(self.calibration_calculated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.calibration_plate_visible, _x.calibration_request_received, _x.calibration_plate_localized, _x.calibration_input_poses_received, _x.calibration_calculated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.calibration_plate_visible, _x.calibration_request_received, _x.calibration_plate_localized, _x.calibration_input_poses_received, _x.calibration_calculated,) = _get_struct_5B().unpack(str[start:end])
      self.calibration_plate_visible = bool(self.calibration_plate_visible)
      self.calibration_request_received = bool(self.calibration_request_received)
      self.calibration_plate_localized = bool(self.calibration_plate_localized)
      self.calibration_input_poses_received = bool(self.calibration_input_poses_received)
      self.calibration_calculated = bool(self.calibration_calculated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
