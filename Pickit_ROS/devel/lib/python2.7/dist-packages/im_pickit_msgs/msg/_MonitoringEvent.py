# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/MonitoringEvent.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MonitoringEvent(genpy.Message):
  _md5sum = "5672f74acd1b7b29851e9bac432c4c5c"
  _type = "im_pickit_msgs/MonitoringEvent"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Definitions of event codes.
# System specific events.
int32 EVENT_SYSTEM_STARTED = 1
int32 EVENT_SYSTEM_CONFIGURED = 2


# Camera specific events.
int32 EVENT_CAMERA_CONNECTED = 21
int32 EVENT_CAMERA_DISCONNECTED = 22

# TODO: Add many more events here.

# Robot-camera calibration specific events.
int32 EVENT_RC_CALIBRATION_SUCCEEDED = 31
int32 EVENT_RC_CALIBRATION_REQUESTED = 32

# Region of Interest (ROI) specific events.
int32 EVENT_ROI_TEACHING_SUCCEEDED = 41

# Detection related events.
int32 EVENT_SINGLE_DETECTION_REQUESTED = 51

# Configuration related events.
int32 EVENT_CONFIGURATION_REQUESTED = 61

# Snapshot related events.
int32 EVENT_SNAPSHOT_REQUESTED = 81
int32 EVENT_SNAPSHOT_LOADED = 82

# Robot specific events.
int32 EVENT_ROBOT_NEXT_OBJECT_REQUESTED = 101


# Definitions of event sources.
int32 SOURCE_UNSPECIFIED = 0
int32 SOURCE_SYSTEM = 1
int32 SOURCE_CAMERA = 2
int32 SOURCE_ROBOT = 3
int32 SOURCE_WEB_INTERFACE = 4

# Message fields.
time stamp
int32 code
int32 source          # Only relevant for events where the origin is not clear.
string message        # Additional payload message.
"""
  # Pseudo-constants
  EVENT_SYSTEM_STARTED = 1
  EVENT_SYSTEM_CONFIGURED = 2
  EVENT_CAMERA_CONNECTED = 21
  EVENT_CAMERA_DISCONNECTED = 22
  EVENT_RC_CALIBRATION_SUCCEEDED = 31
  EVENT_RC_CALIBRATION_REQUESTED = 32
  EVENT_ROI_TEACHING_SUCCEEDED = 41
  EVENT_SINGLE_DETECTION_REQUESTED = 51
  EVENT_CONFIGURATION_REQUESTED = 61
  EVENT_SNAPSHOT_REQUESTED = 81
  EVENT_SNAPSHOT_LOADED = 82
  EVENT_ROBOT_NEXT_OBJECT_REQUESTED = 101
  SOURCE_UNSPECIFIED = 0
  SOURCE_SYSTEM = 1
  SOURCE_CAMERA = 2
  SOURCE_ROBOT = 3
  SOURCE_WEB_INTERFACE = 4

  __slots__ = ['stamp','code','source','message']
  _slot_types = ['time','int32','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,code,source,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MonitoringEvent, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.code is None:
        self.code = 0
      if self.source is None:
        self.source = 0
      if self.message is None:
        self.message = ''
    else:
      self.stamp = genpy.Time()
      self.code = 0
      self.source = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.stamp.secs, _x.stamp.nsecs, _x.code, _x.source))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.stamp.secs, _x.stamp.nsecs, _x.code, _x.source,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i().pack(_x.stamp.secs, _x.stamp.nsecs, _x.code, _x.source))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.stamp.secs, _x.stamp.nsecs, _x.code, _x.source,) = _get_struct_2I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i = None
def _get_struct_2I2i():
    global _struct_2I2i
    if _struct_2I2i is None:
        _struct_2I2i = struct.Struct("<2I2i")
    return _struct_2I2i
