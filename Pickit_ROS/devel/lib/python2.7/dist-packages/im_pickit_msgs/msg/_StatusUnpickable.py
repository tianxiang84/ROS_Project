# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/StatusUnpickable.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusUnpickable(genpy.Message):
  _md5sum = "7a651c88be4b7987ea0a0fd56c2152f2"
  _type = "im_pickit_msgs/StatusUnpickable"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# These objects (0 <= status <= 99)
# will get an orange colored visualization marker.

string CATEGORY = UNPICKABLE

### Enums:

uint16 CENTER_OUTSIDE_ROI = 0

uint16 INVALID_BORDER_DISTANCE = 10

uint16 COLLISION_WITH_BOX = 20

uint16 COLLISION_WITH_POINT_CLOUD = 30

uint16 INVALID_Z_AXIS_ORIENTATION = 40

uint16 COLLISION_WITH_BOX_IN_BETWEEN_OBJECT_AND_ROI = 50
"""
  # Pseudo-constants
  CATEGORY = 'UNPICKABLE'
  CENTER_OUTSIDE_ROI = 0
  INVALID_BORDER_DISTANCE = 10
  COLLISION_WITH_BOX = 20
  COLLISION_WITH_POINT_CLOUD = 30
  INVALID_Z_AXIS_ORIENTATION = 40
  COLLISION_WITH_BOX_IN_BETWEEN_OBJECT_AND_ROI = 50

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusUnpickable, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
