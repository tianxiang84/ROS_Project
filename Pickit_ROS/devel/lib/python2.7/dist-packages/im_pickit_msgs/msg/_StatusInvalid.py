# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/StatusInvalid.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusInvalid(genpy.Message):
  _md5sum = "de376df19f3bac290330f837647f3728"
  _type = "im_pickit_msgs/StatusInvalid"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# These objects (100 <= status <= 999)
# will get a red colored visualization marker.

string CATEGORY = INVALID

### Enums:

uint16 UNRELIABLE_3D_SCENE_COVERAGE_TOO_LOW = 100
uint16 UNRELIABLE_2D_SCENE_COVERAGE_TOO_LOW = 101
uint16 UNRELIABLE_3D_MODEL_COVERAGE_TOO_LOW = 102
uint16 UNRELIABLE_2D_MODEL_CONTOUR_COVERAGE_TOO_LOW = 103
uint16 UNRELIABLE_2D_MODEL_SURFACE_COVERAGE_TOO_LOW = 104
uint16 UNRELIABLE_2D_MODEL_SURFACE_COVERAGE_TOO_HIGH = 105

uint16 UNRELIABLE_MISALIGNED_X_AXIS = 200
uint16 UNRELIABLE_MISALIGNED_Y_AXIS = 201

uint16 WRONG_SIZE_SMALLER_THAN_X_MIN = 300
uint16 WRONG_SIZE_LARGER_THAN_X_MAX = 301
uint16 WRONG_SIZE_SMALLER_THAN_Y_MIN = 302
uint16 WRONG_SIZE_LARGER_THAN_Y_MAX = 303
uint16 WRONG_SIZE_SMALLER_THAN_Z_MIN = 304
uint16 WRONG_SIZE_LARGER_THAN_Z_MAX = 305
uint16 WRONG_SIZE_SMALLER_THAN_MIN_OBJECT_POINTS = 306
uint16 WRONG_SIZE_LARGER_THAN_MAX_OBJECT_POINTS = 307

uint16 WRONG_SURFACE_SIDE_EXTERNAL = 400
uint16 WRONG_SURFACE_SIDE_INTERNAL = 401

uint16 IN_PREVIOUS_IMAGE = 500
"""
  # Pseudo-constants
  CATEGORY = 'INVALID'
  UNRELIABLE_3D_SCENE_COVERAGE_TOO_LOW = 100
  UNRELIABLE_2D_SCENE_COVERAGE_TOO_LOW = 101
  UNRELIABLE_3D_MODEL_COVERAGE_TOO_LOW = 102
  UNRELIABLE_2D_MODEL_CONTOUR_COVERAGE_TOO_LOW = 103
  UNRELIABLE_2D_MODEL_SURFACE_COVERAGE_TOO_LOW = 104
  UNRELIABLE_2D_MODEL_SURFACE_COVERAGE_TOO_HIGH = 105
  UNRELIABLE_MISALIGNED_X_AXIS = 200
  UNRELIABLE_MISALIGNED_Y_AXIS = 201
  WRONG_SIZE_SMALLER_THAN_X_MIN = 300
  WRONG_SIZE_LARGER_THAN_X_MAX = 301
  WRONG_SIZE_SMALLER_THAN_Y_MIN = 302
  WRONG_SIZE_LARGER_THAN_Y_MAX = 303
  WRONG_SIZE_SMALLER_THAN_Z_MIN = 304
  WRONG_SIZE_LARGER_THAN_Z_MAX = 305
  WRONG_SIZE_SMALLER_THAN_MIN_OBJECT_POINTS = 306
  WRONG_SIZE_LARGER_THAN_MAX_OBJECT_POINTS = 307
  WRONG_SURFACE_SIDE_EXTERNAL = 400
  WRONG_SURFACE_SIDE_INTERNAL = 401
  IN_PREVIOUS_IMAGE = 500

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusInvalid, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
