# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/StatusError.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StatusError(genpy.Message):
  _md5sum = "3ef08eadec9d53cd5205e31b7c108462"
  _type = "im_pickit_msgs/StatusError"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# These objects (status >= 1000)
# will not get a visualization marker (due to a mathematical error, ie bug)

string CATEGORY = ERROR

### Enums:

uint16 POSE_CONTAINS_NANS = 1000
uint16 INVALID_ROTATION_MATRIX = 1001
uint16 SIZE_LARGER_THAN_ROI_BOX = 1002
uint16 INSUFFICIENT_INLIER_POINTS = 1003
"""
  # Pseudo-constants
  CATEGORY = 'ERROR'
  POSE_CONTAINS_NANS = 1000
  INVALID_ROTATION_MATRIX = 1001
  SIZE_LARGER_THAN_ROI_BOX = 1002
  INSUFFICIENT_INLIER_POINTS = 1003

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StatusError, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
