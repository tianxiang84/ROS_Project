# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from im_pickit_msgs/ColorRangeRGB.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ColorRangeRGB(genpy.Message):
  _md5sum = "31b60f88d3839dd75fbd039dd46fec9a"
  _type = "im_pickit_msgs/ColorRangeRGB"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# An RGB-based color range.

# The range for the colors (from 0 to 255).
int32 r_min
int32 r_max
int32 g_min
int32 g_max
int32 b_min
int32 b_max

uint32 threshold"""
  __slots__ = ['r_min','r_max','g_min','g_max','b_min','b_max','threshold']
  _slot_types = ['int32','int32','int32','int32','int32','int32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       r_min,r_max,g_min,g_max,b_min,b_max,threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ColorRangeRGB, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.r_min is None:
        self.r_min = 0
      if self.r_max is None:
        self.r_max = 0
      if self.g_min is None:
        self.g_min = 0
      if self.g_max is None:
        self.g_max = 0
      if self.b_min is None:
        self.b_min = 0
      if self.b_max is None:
        self.b_max = 0
      if self.threshold is None:
        self.threshold = 0
    else:
      self.r_min = 0
      self.r_max = 0
      self.g_min = 0
      self.g_max = 0
      self.b_min = 0
      self.b_max = 0
      self.threshold = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6iI().pack(_x.r_min, _x.r_max, _x.g_min, _x.g_max, _x.b_min, _x.b_max, _x.threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.r_min, _x.r_max, _x.g_min, _x.g_max, _x.b_min, _x.b_max, _x.threshold,) = _get_struct_6iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6iI().pack(_x.r_min, _x.r_max, _x.g_min, _x.g_max, _x.b_min, _x.b_max, _x.threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.r_min, _x.r_max, _x.g_min, _x.g_max, _x.b_min, _x.b_max, _x.threshold,) = _get_struct_6iI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6iI = None
def _get_struct_6iI():
    global _struct_6iI
    if _struct_6iI is None:
        _struct_6iI = struct.Struct("<6iI")
    return _struct_6iI
