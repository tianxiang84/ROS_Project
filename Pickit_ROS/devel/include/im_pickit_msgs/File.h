// Generated by gencpp from file im_pickit_msgs/File.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_FILE_H
#define IM_PICKIT_MSGS_MESSAGE_FILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct File_
{
  typedef File_<ContainerAllocator> Type;

  File_()
    : file_id(0)
    , file_name()
    , readonly(false)  {
    }
  File_(const ContainerAllocator& _alloc)
    : file_id(0)
    , file_name(_alloc)
    , readonly(false)  {
  (void)_alloc;
    }



   typedef int32_t _file_id_type;
  _file_id_type file_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_name_type;
  _file_name_type file_name;

   typedef uint8_t _readonly_type;
  _readonly_type readonly;




  typedef boost::shared_ptr< ::im_pickit_msgs::File_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::File_<ContainerAllocator> const> ConstPtr;

}; // struct File_

typedef ::im_pickit_msgs::File_<std::allocator<void> > File;

typedef boost::shared_ptr< ::im_pickit_msgs::File > FilePtr;
typedef boost::shared_ptr< ::im_pickit_msgs::File const> FileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::File_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::File_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::File_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::File_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::File_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::File_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::File_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::File_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::File_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c4f24261c48aaf171f33bc1655b7b8b";
  }

  static const char* value(const ::im_pickit_msgs::File_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c4f24261c48aaf1ULL;
  static const uint64_t static_value2 = 0x71f33bc1655b7b8bULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::File_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/File";
  }

  static const char* value(const ::im_pickit_msgs::File_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::File_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Copyright Intermodalics 2015\n\
int32        file_id\n\
string       file_name\n\
bool         readonly\n\
";
  }

  static const char* value(const ::im_pickit_msgs::File_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::File_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_id);
      stream.next(m.file_name);
      stream.next(m.readonly);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct File_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::File_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::File_<ContainerAllocator>& v)
  {
    s << indent << "file_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.file_id);
    s << indent << "file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_name);
    s << indent << "readonly: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.readonly);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_FILE_H
