// Generated by gencpp from file im_pickit_msgs/MonitoringEvent.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_MONITORINGEVENT_H
#define IM_PICKIT_MSGS_MESSAGE_MONITORINGEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct MonitoringEvent_
{
  typedef MonitoringEvent_<ContainerAllocator> Type;

  MonitoringEvent_()
    : stamp()
    , code(0)
    , source(0)
    , message()  {
    }
  MonitoringEvent_(const ContainerAllocator& _alloc)
    : stamp()
    , code(0)
    , source(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int32_t _code_type;
  _code_type code;

   typedef int32_t _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;


    enum { EVENT_SYSTEM_STARTED = 1 };
     enum { EVENT_SYSTEM_CONFIGURED = 2 };
     enum { EVENT_CAMERA_CONNECTED = 21 };
     enum { EVENT_CAMERA_DISCONNECTED = 22 };
     enum { EVENT_RC_CALIBRATION_SUCCEEDED = 31 };
     enum { EVENT_RC_CALIBRATION_REQUESTED = 32 };
     enum { EVENT_ROI_TEACHING_SUCCEEDED = 41 };
     enum { EVENT_SINGLE_DETECTION_REQUESTED = 51 };
     enum { EVENT_CONFIGURATION_REQUESTED = 61 };
     enum { EVENT_SNAPSHOT_REQUESTED = 81 };
     enum { EVENT_SNAPSHOT_LOADED = 82 };
     enum { EVENT_ROBOT_NEXT_OBJECT_REQUESTED = 101 };
     enum { SOURCE_UNSPECIFIED = 0 };
     enum { SOURCE_SYSTEM = 1 };
     enum { SOURCE_CAMERA = 2 };
     enum { SOURCE_ROBOT = 3 };
     enum { SOURCE_WEB_INTERFACE = 4 };
 

  typedef boost::shared_ptr< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> const> ConstPtr;

}; // struct MonitoringEvent_

typedef ::im_pickit_msgs::MonitoringEvent_<std::allocator<void> > MonitoringEvent;

typedef boost::shared_ptr< ::im_pickit_msgs::MonitoringEvent > MonitoringEventPtr;
typedef boost::shared_ptr< ::im_pickit_msgs::MonitoringEvent const> MonitoringEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5672f74acd1b7b29851e9bac432c4c5c";
  }

  static const char* value(const ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5672f74acd1b7b29ULL;
  static const uint64_t static_value2 = 0x851e9bac432c4c5cULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/MonitoringEvent";
  }

  static const char* value(const ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definitions of event codes.\n\
# System specific events.\n\
int32 EVENT_SYSTEM_STARTED = 1\n\
int32 EVENT_SYSTEM_CONFIGURED = 2\n\
\n\
\n\
# Camera specific events.\n\
int32 EVENT_CAMERA_CONNECTED = 21\n\
int32 EVENT_CAMERA_DISCONNECTED = 22\n\
\n\
# TODO: Add many more events here.\n\
\n\
# Robot-camera calibration specific events.\n\
int32 EVENT_RC_CALIBRATION_SUCCEEDED = 31\n\
int32 EVENT_RC_CALIBRATION_REQUESTED = 32\n\
\n\
# Region of Interest (ROI) specific events.\n\
int32 EVENT_ROI_TEACHING_SUCCEEDED = 41\n\
\n\
# Detection related events.\n\
int32 EVENT_SINGLE_DETECTION_REQUESTED = 51\n\
\n\
# Configuration related events.\n\
int32 EVENT_CONFIGURATION_REQUESTED = 61\n\
\n\
# Snapshot related events.\n\
int32 EVENT_SNAPSHOT_REQUESTED = 81\n\
int32 EVENT_SNAPSHOT_LOADED = 82\n\
\n\
# Robot specific events.\n\
int32 EVENT_ROBOT_NEXT_OBJECT_REQUESTED = 101\n\
\n\
\n\
# Definitions of event sources.\n\
int32 SOURCE_UNSPECIFIED = 0\n\
int32 SOURCE_SYSTEM = 1\n\
int32 SOURCE_CAMERA = 2\n\
int32 SOURCE_ROBOT = 3\n\
int32 SOURCE_WEB_INTERFACE = 4\n\
\n\
# Message fields.\n\
time stamp\n\
int32 code\n\
int32 source          # Only relevant for events where the origin is not clear.\n\
string message        # Additional payload message.\n\
";
  }

  static const char* value(const ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.code);
      stream.next(m.source);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonitoringEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::MonitoringEvent_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
    s << indent << "source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.source);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_MONITORINGEVENT_H
