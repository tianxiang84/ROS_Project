// Generated by gencpp from file im_pickit_msgs/SubfolderContent.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_SUBFOLDERCONTENT_H
#define IM_PICKIT_MSGS_MESSAGE_SUBFOLDERCONTENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <im_pickit_msgs/File.h>

namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct SubfolderContent_
{
  typedef SubfolderContent_<ContainerAllocator> Type;

  SubfolderContent_()
    : subfolder_name()
    , subfolder_files()  {
    }
  SubfolderContent_(const ContainerAllocator& _alloc)
    : subfolder_name(_alloc)
    , subfolder_files(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _subfolder_name_type;
  _subfolder_name_type subfolder_name;

   typedef std::vector< ::im_pickit_msgs::File_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::im_pickit_msgs::File_<ContainerAllocator> >::other >  _subfolder_files_type;
  _subfolder_files_type subfolder_files;




  typedef boost::shared_ptr< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> const> ConstPtr;

}; // struct SubfolderContent_

typedef ::im_pickit_msgs::SubfolderContent_<std::allocator<void> > SubfolderContent;

typedef boost::shared_ptr< ::im_pickit_msgs::SubfolderContent > SubfolderContentPtr;
typedef boost::shared_ptr< ::im_pickit_msgs::SubfolderContent const> SubfolderContentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e61ad7c13c96906f44de1e72d7cf413f";
  }

  static const char* value(const ::im_pickit_msgs::SubfolderContent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe61ad7c13c96906fULL;
  static const uint64_t static_value2 = 0x44de1e72d7cf413fULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/SubfolderContent";
  }

  static const char* value(const ::im_pickit_msgs::SubfolderContent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Copyright Intermodalics 2014\n\
string                  subfolder_name             ## This is the relative name\n\
im_pickit_msgs/File[]   subfolder_files\n\
\n\
================================================================================\n\
MSG: im_pickit_msgs/File\n\
## Copyright Intermodalics 2015\n\
int32        file_id\n\
string       file_name\n\
bool         readonly\n\
";
  }

  static const char* value(const ::im_pickit_msgs::SubfolderContent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.subfolder_name);
      stream.next(m.subfolder_files);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubfolderContent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::SubfolderContent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::SubfolderContent_<ContainerAllocator>& v)
  {
    s << indent << "subfolder_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.subfolder_name);
    s << indent << "subfolder_files[]" << std::endl;
    for (size_t i = 0; i < v.subfolder_files.size(); ++i)
    {
      s << indent << "  subfolder_files[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::im_pickit_msgs::File_<ContainerAllocator> >::stream(s, indent + "    ", v.subfolder_files[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_SUBFOLDERCONTENT_H
