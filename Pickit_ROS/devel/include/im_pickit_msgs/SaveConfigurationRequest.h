// Generated by gencpp from file im_pickit_msgs/SaveConfigurationRequest.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_SAVECONFIGURATIONREQUEST_H
#define IM_PICKIT_MSGS_MESSAGE_SAVECONFIGURATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct SaveConfigurationRequest_
{
  typedef SaveConfigurationRequest_<ContainerAllocator> Type;

  SaveConfigurationRequest_()
    : config_file_path()
    , set_active(false)  {
    }
  SaveConfigurationRequest_(const ContainerAllocator& _alloc)
    : config_file_path(_alloc)
    , set_active(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _config_file_path_type;
  _config_file_path_type config_file_path;

   typedef uint8_t _set_active_type;
  _set_active_type set_active;


    enum { STATUS_SUCCESS = 10u };
     enum { STATUS_FAILURE = 20u };
     enum { STATUS_INVALID_FILENAME = 22u };
 

  typedef boost::shared_ptr< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveConfigurationRequest_

typedef ::im_pickit_msgs::SaveConfigurationRequest_<std::allocator<void> > SaveConfigurationRequest;

typedef boost::shared_ptr< ::im_pickit_msgs::SaveConfigurationRequest > SaveConfigurationRequestPtr;
typedef boost::shared_ptr< ::im_pickit_msgs::SaveConfigurationRequest const> SaveConfigurationRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a29c739356f1155756656d84cacefd7";
  }

  static const char* value(const ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a29c739356f1155ULL;
  static const uint64_t static_value2 = 0x756656d84cacefd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/SaveConfigurationRequest";
  }

  static const char* value(const ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 STATUS_SUCCESS          = 10\n\
uint8 STATUS_FAILURE          = 20\n\
\n\
uint8 STATUS_INVALID_FILENAME = 22\n\
\n\
string    config_file_path\n\
bool      set_active\n\
";
  }

  static const char* value(const ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.config_file_path);
      stream.next(m.set_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveConfigurationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::SaveConfigurationRequest_<ContainerAllocator>& v)
  {
    s << indent << "config_file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.config_file_path);
    s << indent << "set_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_SAVECONFIGURATIONREQUEST_H
