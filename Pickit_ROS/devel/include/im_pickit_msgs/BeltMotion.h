// Generated by gencpp from file im_pickit_msgs/BeltMotion.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_BELTMOTION_H
#define IM_PICKIT_MSGS_MESSAGE_BELTMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>
#include <geometry_msgs/Vector3.h>

namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct BeltMotion_
{
  typedef BeltMotion_<ContainerAllocator> Type;

  BeltMotion_()
    : frame_id()
    , child_frame_id()
    , object_motion_type(0)
    , camera_to_belt_tf()
    , belt_speed_magnitude(0.0)
    , belt_normalised_speed_vector()  {
    }
  BeltMotion_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , child_frame_id(_alloc)
    , object_motion_type(0)
    , camera_to_belt_tf(_alloc)
    , belt_speed_magnitude(0.0)
    , belt_normalised_speed_vector(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef int32_t _object_motion_type_type;
  _object_motion_type_type object_motion_type;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _camera_to_belt_tf_type;
  _camera_to_belt_tf_type camera_to_belt_tf;

   typedef double _belt_speed_magnitude_type;
  _belt_speed_magnitude_type belt_speed_magnitude;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _belt_normalised_speed_vector_type;
  _belt_normalised_speed_vector_type belt_normalised_speed_vector;




  typedef boost::shared_ptr< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> const> ConstPtr;

}; // struct BeltMotion_

typedef ::im_pickit_msgs::BeltMotion_<std::allocator<void> > BeltMotion;

typedef boost::shared_ptr< ::im_pickit_msgs::BeltMotion > BeltMotionPtr;
typedef boost::shared_ptr< ::im_pickit_msgs::BeltMotion const> BeltMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::BeltMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1418c364a9790e036636f3c087e1c72";
  }

  static const char* value(const ::im_pickit_msgs::BeltMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1418c364a9790e0ULL;
  static const uint64_t static_value2 = 0x36636f3c087e1c72ULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/BeltMotion";
  }

  static const char* value(const ::im_pickit_msgs::BeltMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Copyright Intermodalics 2014\n\
# Angular twist message\n\
\n\
string frame_id											# Parent frame (camera)\n\
string child_frame_id									# Child frame (belt)\n\
int32 object_motion_type								# Object motion type 0 = static, 1 = linear, 2 = angular														\n\
geometry_msgs/Transform camera_to_belt_tf				# Camera to belt frame. Transforms belt to camera coordinates.\n\
														# - std_msgs/Header header\n\
														# - string child_frame_id\n\
														# - geometry_msgs/Transform transform\n\
														\n\
float64 belt_speed_magnitude							# Magnitude linear velocity\n\
geometry_msgs/Vector3 belt_normalised_speed_vector		# Direction of linear speed in belt frame\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::im_pickit_msgs::BeltMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.child_frame_id);
      stream.next(m.object_motion_type);
      stream.next(m.camera_to_belt_tf);
      stream.next(m.belt_speed_magnitude);
      stream.next(m.belt_normalised_speed_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BeltMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::BeltMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::BeltMotion_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "object_motion_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_motion_type);
    s << indent << "camera_to_belt_tf: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_to_belt_tf);
    s << indent << "belt_speed_magnitude: ";
    Printer<double>::stream(s, indent + "  ", v.belt_speed_magnitude);
    s << indent << "belt_normalised_speed_vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.belt_normalised_speed_vector);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_BELTMOTION_H
