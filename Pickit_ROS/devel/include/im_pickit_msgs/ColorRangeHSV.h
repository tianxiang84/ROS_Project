// Generated by gencpp from file im_pickit_msgs/ColorRangeHSV.msg
// DO NOT EDIT!


#ifndef IM_PICKIT_MSGS_MESSAGE_COLORRANGEHSV_H
#define IM_PICKIT_MSGS_MESSAGE_COLORRANGEHSV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace im_pickit_msgs
{
template <class ContainerAllocator>
struct ColorRangeHSV_
{
  typedef ColorRangeHSV_<ContainerAllocator> Type;

  ColorRangeHSV_()
    : h_min(0)
    , h_max(0)
    , s_min(0.0)
    , s_max(0.0)
    , v_min(0.0)
    , v_max(0.0)  {
    }
  ColorRangeHSV_(const ContainerAllocator& _alloc)
    : h_min(0)
    , h_max(0)
    , s_min(0.0)
    , s_max(0.0)
    , v_min(0.0)
    , v_max(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _h_min_type;
  _h_min_type h_min;

   typedef uint32_t _h_max_type;
  _h_max_type h_max;

   typedef double _s_min_type;
  _s_min_type s_min;

   typedef double _s_max_type;
  _s_max_type s_max;

   typedef double _v_min_type;
  _v_min_type v_min;

   typedef double _v_max_type;
  _v_max_type v_max;




  typedef boost::shared_ptr< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> const> ConstPtr;

}; // struct ColorRangeHSV_

typedef ::im_pickit_msgs::ColorRangeHSV_<std::allocator<void> > ColorRangeHSV;

typedef boost::shared_ptr< ::im_pickit_msgs::ColorRangeHSV > ColorRangeHSVPtr;
typedef boost::shared_ptr< ::im_pickit_msgs::ColorRangeHSV const> ColorRangeHSVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace im_pickit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'im_pickit_msgs': ['/home/sdrwcs/ROS_Projects/Pickit_ROS/src/im_pickit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54efefea98c15a07b7359b9e855639cf";
  }

  static const char* value(const ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54efefea98c15a07ULL;
  static const uint64_t static_value2 = 0xb7359b9e855639cfULL;
};

template<class ContainerAllocator>
struct DataType< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "im_pickit_msgs/ColorRangeHSV";
  }

  static const char* value(const ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An HSV-based color range.\n\
\n\
# The range for the color representation. \n\
# Hue: range is from 0 to 360.\n\
uint32 h_min\n\
uint32 h_max\n\
# Saturation: range is from 0 to 1.\n\
float64 s_min\n\
float64 s_max\n\
# Saturation: range is from 0 to 1.\n\
float64 v_min\n\
float64 v_max\n\
";
  }

  static const char* value(const ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.h_min);
      stream.next(m.h_max);
      stream.next(m.s_min);
      stream.next(m.s_max);
      stream.next(m.v_min);
      stream.next(m.v_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorRangeHSV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::im_pickit_msgs::ColorRangeHSV_<ContainerAllocator>& v)
  {
    s << indent << "h_min: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h_min);
    s << indent << "h_max: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h_max);
    s << indent << "s_min: ";
    Printer<double>::stream(s, indent + "  ", v.s_min);
    s << indent << "s_max: ";
    Printer<double>::stream(s, indent + "  ", v.s_max);
    s << indent << "v_min: ";
    Printer<double>::stream(s, indent + "  ", v.v_min);
    s << indent << "v_max: ";
    Printer<double>::stream(s, indent + "  ", v.v_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IM_PICKIT_MSGS_MESSAGE_COLORRANGEHSV_H
